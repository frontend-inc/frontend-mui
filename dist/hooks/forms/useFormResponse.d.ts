import React from 'react';
type UseFormResponseParams = {
    formId: number | string;
};
declare const useFormResponse: (params: UseFormResponseParams) => {
    paginate: (page: number) => Promise<any>;
    loading: boolean;
    loaded: any;
    delayedLoading: any;
    errors: Record<string, any>;
    empty: any;
    editing: any;
    isValid: any;
    formResponse: any;
    formResponses: any[];
    findFormResponse: (id: import("frontend-js").ID) => any;
    findFormResponses: (queryParams?: import("frontend-js").QueryParamsType) => void;
    saveFormResponse: (resource: any) => any;
    updateFormResponse: (resource: any) => any;
    updateFormResponses: (ids: import("frontend-js").ID[], data: any) => Promise<any>;
    createFormResponse: (resource: any) => any;
    deleteFormResponse: (id: import("frontend-js").ID) => Promise<any>;
    deleteFormResponses: (ids: import("frontend-js").ID[]) => void;
    loadMore: () => void;
    addAttachment: (id: import("frontend-js").ID, fieldName: string, attachmentId: import("frontend-js").ID) => any;
    removeAttachment: (id: import("frontend-js").ID, fieldName: string) => any;
    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    handleChangePage: any;
    query: import("frontend-js").QueryParamsType;
    setQuery: (params: import("frontend-js").QueryParamsType) => void;
    reloadFormResponse: any;
    reloadFormResponses: () => Promise<any>;
    page: number;
    numPages: number;
    perPage: number;
    totalCount: number;
    updatePositions: (sorted: any[]) => Promise<any>;
    sortBy: any;
    sortDirection: any;
    handleSort: any;
    setFormResponse: (value: any) => void;
    setFormResponses: (value: any[]) => void;
    startIndex: any;
    endIndex: any;
    loadingWrapper: (fn: () => void) => void;
};
export default useFormResponse;
