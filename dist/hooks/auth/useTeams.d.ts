import React from 'react';
import { UserType, TeamType } from '../../types';
declare const useTeams: () => {
    loading: boolean;
    delayedLoading: any;
    errors: Record<string, any>;
    team: import("frontend-js").ResourceType;
    teams: import("frontend-js").ResourceType[];
    findTeam: (id: import("frontend-js").ID) => import("frontend-js").ResourceType;
    findTeams: (queryParams?: import("frontend-js").QueryParamsType, loadMore?: boolean) => Promise<any>;
    updateTeam: (resource: import("frontend-js").ResourceType) => import("frontend-js").ResourceType;
    createTeam: (resource: import("frontend-js").ResourceType) => import("frontend-js").ResourceType;
    deleteTeam: (id: import("frontend-js").ID) => Promise<any>;
    selectTeam: (teamId: any) => Promise<UserType>;
    setTeam: (value: import("frontend-js").ResourceType) => void;
    user: {};
    setUser: React.Dispatch<React.SetStateAction<{}>>;
    inviteUser: (teamId: any, user: any) => Promise<void>;
    deleteImage: (teamId: any) => Promise<TeamType>;
    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    handleChangePage: any;
    reloadTeams: () => Promise<any>;
    query: import("frontend-js").QueryParamsType;
    setQuery: (params: import("frontend-js").QueryParamsType) => void;
    page: number;
    numPages: number;
    perPage: number;
    totalCount: number;
    sortBy: any;
    sortDirection: any;
    handleSort: any;
    loadMore: () => void;
    loadingWrapper: (fn: () => void) => void;
    paginate: (page: number) => Promise<any>;
    removeAttachment: (id: import("frontend-js").ID, fieldName: string) => import("frontend-js").ResourceType;
};
export default useTeams;
